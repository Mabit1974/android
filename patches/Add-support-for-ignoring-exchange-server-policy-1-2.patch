From 35f2e10bc15bea6bb7251859106c38c261e45ae6 Mon Sep 17 00:00:00 2001
From: milaq <micha.laqua@gmail.com>
Date: Sun, 19 Jul 2015 14:01:02 +0200
Subject: [PATCH] Add support for ignoring exchange server policy (1/2)

Some of us don't like the policies enforced by some exchange server configurations or the inconveniences that come with it (safe lockscreen, etc.).
So make it possible to ignore any policies pushed by the exchange server.

Based on the "ExchangeBypassXposed" module by Shantanu Goel.

This also requires the app to be signed with platform keys.
---
 emailcommon/Android.mk                                      |  2 --
 .../src/com/android/emailcommon/provider/Policy.java        | 13 ++++++++++++-
 provider_src/com/android/email/SecurityPolicy.java          | 11 +++++++++++
 src/com/android/email/EmailNotificationController.java      |  3 +++
 4 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/emailcommon/Android.mk b/emailcommon/Android.mk
index 654e20d..cafc362 100644
--- a/emailcommon/Android.mk
+++ b/emailcommon/Android.mk
@@ -42,8 +42,6 @@ LOCAL_SRC_FILES += $(call all-java-files-under, $(apache_src_dir))
 LOCAL_SRC_FILES += $(imported_unified_email_files)
 LOCAL_SRC_FILES += $(call all-java-files-under, $(unified_email_src_dir)/com/android/emailcommon)
 
-LOCAL_SDK_VERSION := 14
-
 LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res
 
 include $(BUILD_STATIC_JAVA_LIBRARY)
diff --git a/emailcommon/src/com/android/emailcommon/provider/Policy.java b/emailcommon/src/com/android/emailcommon/provider/Policy.java
index f32b750..c91d8e0 100755
--- a/emailcommon/src/com/android/emailcommon/provider/Policy.java
+++ b/emailcommon/src/com/android/emailcommon/provider/Policy.java
@@ -25,6 +25,7 @@ import android.database.Cursor;
 import android.net.Uri;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.os.SystemProperties;
 
 import com.android.emailcommon.utility.TextUtilities;
 import com.android.emailcommon.utility.Utility;
@@ -226,6 +227,16 @@ public final class Policy extends EmailContent implements EmailContent.PolicyCol
      * zero out complex characters for simple passwords.
      */
     public void normalize() {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false)) {
+            mPasswordMode = PASSWORD_MODE_NONE;
+            mRequireRemoteWipe = false;
+            mRequireEncryption = false;
+            mRequireEncryptionExternal = false;
+            mRequireManualSyncWhenRoaming = false;
+            mDontAllowCamera = false;
+            mDontAllowAttachments = false;
+            mDontAllowHtml = false;
+        }
         if (mPasswordMode == PASSWORD_MODE_NONE) {
             mPasswordMaxFails = 0;
             mMaxScreenLockTime = 0;
@@ -525,4 +536,4 @@ public final class Policy extends EmailContent implements EmailContent.PolicyCol
         mProtocolPoliciesEnforced = in.readString();
         mProtocolPoliciesUnsupported = in.readString();
     }
-}
\ No newline at end of file
+}
diff --git a/provider_src/com/android/email/SecurityPolicy.java b/provider_src/com/android/email/SecurityPolicy.java
index 8418871..60951c6 100644
--- a/provider_src/com/android/email/SecurityPolicy.java
+++ b/provider_src/com/android/email/SecurityPolicy.java
@@ -31,6 +31,7 @@ import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.RemoteException;
+import android.os.SystemProperties;
 
 import com.android.email.NotificationController;
 import com.android.email.NotificationControllerCreatorHolder;
@@ -247,6 +248,8 @@ public class SecurityPolicy {
      * @return true if the requested policies are active, false if not.
      */
     public boolean isActive(Policy policy) {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return true;
         int reasons = getInactiveReasons(policy);
         if (DebugUtils.DEBUG && (reasons != 0)) {
             StringBuilder sb = new StringBuilder("isActive for " + policy + ": ");
@@ -317,6 +320,8 @@ public class SecurityPolicy {
      * is needed (typically, by the user) before the required security polices are fully active.
      */
     public int getInactiveReasons(Policy policy) {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return 0;
         // select aggregate set if needed
         if (policy == null) {
             policy = getAggregatePolicy();
@@ -403,6 +408,8 @@ public class SecurityPolicy {
      * we only proceed if we are already active as an admin.
      */
     public void setActivePolicies() {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return;
         DevicePolicyManager dpm = getDPM();
         // compute aggregate set of policies
         Policy aggregatePolicy = getAggregatePolicy();
@@ -677,6 +684,8 @@ public class SecurityPolicy {
      * return to the caller if there is an unexpected failure.  The wipe includes external storage.
      */
     public void remoteWipe() {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return;
         DevicePolicyManager dpm = getDPM();
         if (dpm.isAdminActive(mAdminName)) {
             dpm.wipeData(DevicePolicyManager.WIPE_EXTERNAL_STORAGE);
@@ -694,6 +703,8 @@ public class SecurityPolicy {
      * @return true if we are already active, false if we are not
      */
     public boolean isActiveAdmin() {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return true;
         DevicePolicyManager dpm = getDPM();
         return dpm.isAdminActive(mAdminName)
                 && dpm.hasGrantedPolicy(mAdminName, DeviceAdminInfo.USES_POLICY_EXPIRE_PASSWORD)
diff --git a/src/com/android/email/EmailNotificationController.java b/src/com/android/email/EmailNotificationController.java
index e57b418..6886e9a 100644
--- a/src/com/android/email/EmailNotificationController.java
+++ b/src/com/android/email/EmailNotificationController.java
@@ -31,6 +31,7 @@ import android.net.Uri;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Process;
+import android.os.SystemProperties;
 import android.provider.Settings;
 import android.support.v4.app.NotificationCompat;
 import android.text.TextUtils;
@@ -515,6 +516,8 @@ public class EmailNotificationController implements NotificationController {
      */
     @Override
     public void showSecurityChangedNotification(Account account) {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return;
         final Intent intent = new Intent(Intent.ACTION_VIEW,
                 EmailProvider.getIncomingSettingsUri(account.getId()));
         final String accountName = account.getDisplayName();
-- 
2.4.6

